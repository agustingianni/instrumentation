import sys
import os
from optparse import OptionParser
from logging import info, error, basicConfig, INFO
from trace_.TraceReader import TraceReader
from analyzers.TypeReconstructor import TypeReconstructor

if os.environ.has_key("RECOVERER_PATH"):
    RECOVERER_PATH = os.environ["RECOVERER_PATH"]
    if os.path.abspath(RECOVERER_PATH + "scripts") not in sys.path:
        sys.path.append(os.path.abspath(RECOVERER_PATH + "\\scripts"))
else:
    raise Exception("RECOVERER_PATH environment variable not set, go set it")

def parse_command_line():
    parser = OptionParser()

    parser.add_option("-i", "--input", dest="input_file", 
                      help="Name of the file that will be created with all the dumps inside.")
    
    parser.add_option("-o", "--output", dest="output_file", 
                      help="Name of the file that will be created with all the dumps inside.")

    parser.add_option("-d", "--image", dest="image_name", 
                      help="Name of the analyzed image.")
    
    parser.add_option("-t", "--threshold", dest="similarity_threshold", 
                      help="Value that needs to be exceeded to consider two types as equal.")

    (options, args) = parser.parse_args()

    basicConfig(format='[%(levelname)s] : %(message)s', level=INFO)

    settings = {}

    if not options.image_name:
        error("Image name is missing. Please specify an image name to analyze.")
        parser.print_help()
        sys.exit(-1)
    else:
        settings["image_name"] = options.image_name
        info("Image name %s" % settings["image_name"])

    if not options.input_file:
        error("Input trace file is missing")
        parser.print_help()
        sys.exit(-1)
    else:
        settings["input_file"] = os.path.abspath(options.input_file)
        info("Input file %s" % settings["input_file"])

    if not options.output_file:
        info("Output file is missing, using default value of Types_%s.h" %(options.image_name))
        settings["output_file"] = os.path.abspath("Types_%s.h" %(options.image_name))
    else:
        settings["output_file"] = os.path.abspath(options.output_file)
        
    # This defines the minimum similarity index between two types to merge them
    if not options.similarity_threshold:
        ST = 30.0
        info("Using the default value for similarity threshold of %d%%" % ST)
        settings["similarity_threshold"] = ST
    else:
        t = float(options.similarity_threshold)
        if t > 0.0 and t <= 100.0:
            settings["similarity_threshold"] = t
        else:
            error("Invalid similarity threshold, values must be between (0, 100]")
            sys.exit(-1)
            
    return settings

title = \
"""
// 
//  _____                 ______                              _             
// |_   _|                | ___ \                            (_)            
//   | |_   _ _ __   ___  | |_/ /___  ___  _____   _____ _ __ _ _ __   __ _ 
//   | | | | | '_ \ / _ \ |    // _ \/ __|/ _ \ \ / / _ \ '__| | '_ \ / _` |
//   | | |_| | |_) |  __/ | |\ \  __/ (__| (_) \ V /  __/ |  | | | | | (_| |
//   \_/\__, | .__/ \___| \_| \_\___|\___|\___/ \_/ \___|_|  |_|_| |_|\__, |
//       __/ | |                                                       __/ |
//      |___/|_|                                                      |___/
//      
//      by Agustin Gianni (agustin@immunityinc.com).
"""

from helpers.IDAExporter import IDADatabase

def main():
    print title

    settings = parse_command_line()
    
    # Load the trace file generated by pin.
    trace = TraceReader(settings["input_file"], 500)
    trace.parse()
        
    # Load the ida database generated by IDAExporter.py in order to access function names and other stuff.
    ida_db = IDADatabase(settings["image_name"])
    ida_db.load()
    
    # Get an instance of the type re-constructor.
    analyzer = TypeReconstructor(settings, trace, ida_db)
    analyzer.analyze()
    analyzer.dump_types()

    return
                        
if __name__ == "__main__":
    main()
